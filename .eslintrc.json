{
  // Настройки проекта
  "env": {
    // Проект для браузера
    "browser": true,
    // Включаем возможности ES6
    "es6": true,
    // Добавляем возможности ES2017
    "es2017": true
  },
  "ignorePatterns": [
    "__generated__",
    "*.d.ts",
    "cypress",
    "lib/*"
  ],
  // Наборы правил
  "extends": [
    "next",
    // Базовый набор правил eslint
    "eslint:recommended",
    // Отключаем правила из базового набора
    "plugin:@typescript-eslint/eslint-recommended",
    // Базовые правила для TypeScript
    "plugin:@typescript-eslint/recommended",
    // Правила TS, требующие инфо о типах
    "plugin:@typescript-eslint/recommended-requiring-type-checking"
  ],
  // Движок парсинга
  "parser": "@typescript-eslint/parser",
  "parserOptions": {
    // Движку нужен проект TS для правил с типами
    "project": "tsconfig.json",
    "tsconfigRootDir": "."
  },
  // Плагин с наборами правил для TypeScript
  "plugins": [
    "@typescript-eslint",
    "react",
    "react-hooks",
    "promise",
    "import",
    "simple-import-sort"
  ],
  "rules": {
    "no-shadow": ["error", { "builtinGlobals": true }], // disallow variable declarations from shadowing variables declared in the outer scope
    "no-duplicate-imports": ["error", { "includeExports": true }], // disallow duplicate module imports
    "no-template-curly-in-string": "error", // disallow template literal placeholder syntax in regular strings
    "block-scoped-var": "error", // enforce the use of variables within the scope they are defined
    "eqeqeq": "error", // equire the use of === and !==
    "no-console": "warn", // disallow the use of console
    "no-else-return": ["error", { "allowElseIf": false }], // disallow else blocks after return statements in if statements
    "no-implicit-coercion": "error", // disallow shorthand type conversions
    "no-return-await": "error", // disallow unnecessary return await
    "no-self-compare": "error", // disallow comparisons where both sides are exactly the same
    "no-sequences": "error", // disallow comma operators
    "no-throw-literal": "error", // disallow throwing literals as exceptions
    "no-unused-expressions": "error", // disallow unused expressions
    "no-useless-call": "error", // disallow unnecessary calls to .call() and .apply()
    "no-useless-concat": "error", // disallow unnecessary concatenation of literals or template literals
    "no-useless-return": "error", // disallow redundant return statements
    "no-multiple-empty-lines": "error", // disallow multiple empty lines
    "no-nested-ternary": "error", // disallow nested ternary expressions
    "no-new-object": "error", // disallow Object constructors
    "no-unneeded-ternary": "error", // disallow ternary operators when simpler alternatives exist
    "no-confusing-arrow": "error", // disallow arrow functions where they could be confused with comparisons
    "no-useless-computed-key": "error", // disallow unnecessary computed property keys in object literals
    "no-useless-rename": "error", // disallow renaming import, export, and destructured assignments to the same name
    "sort-imports": "off",
    "import/order": "off",

    "@typescript-eslint/member-ordering": "warn", // Require a consistent member declaration order
    "@typescript-eslint/brace-style": ["error", "1tbs"], // Enforce consistent brace style for blocks
    "@typescript-eslint/func-call-spacing": ["error", "never"], // Require or disallow spacing between function identifiers and their invocations
    "@typescript-eslint/no-useless-constructor": "error", // Disallow unnecessary constructors
    "@typescript-eslint/prefer-for-of": "warn", // Prefer a ‘for-of’ loop over a standard ‘for’ loop if the index is only used to access the array being iterated
    "@typescript-eslint/no-unnecessary-type-arguments": "warn", // Warns if an explicitly specified type argument is the default for that type parameter
    "@typescript-eslint/prefer-function-type": "warn", // Use function types instead of interfaces with call signatures
    "@typescript-eslint/prefer-readonly": "warn", // Requires that private members are marked as readonly if they're never modified outside of the constructor
    "@typescript-eslint/explicit-function-return-type": ["error", { "allowExpressions": true }],
    "@typescript-eslint/interface-name-prefix": "off",
    "@typescript-eslint/no-unused-vars": ["error", { "argsIgnorePattern": "^_", "varsIgnorePattern": "^_$" }],
    "@typescript-eslint/naming-convention": [
      "error",
      {
        "selector": "variable",
        "format": ["PascalCase", "camelCase", "UPPER_CASE"]
      }
    ],

    "promise/prefer-await-to-then": "error", // refer await to then() for reading Promise values,

    "react/no-access-state-in-setstate": "error", // Prevent using this.state inside this.setState
    "react/no-danger": "error", // Prevent usage of dangerous JSX properties
    "react/no-this-in-sfc": "error", // Prevent using this in stateless functional components
    "react/prefer-stateless-function": "error", // Enforce stateless React Components to be written as a pure function
    "react/jsx-filename-extension": ["error", { "extensions": [".tsx"] }],
    "react/jsx-no-bind": ["error", { "ignoreDOMComponents": true }], // Prevent usage of .bind() and arrow functions in JSX props
    "react/jsx-no-useless-fragment": "error", // Disallow unnecessary fragments,
    "react/jsx-pascal-case": "error", // Enforce PascalCase for user-defined JSX components

    "simple-import-sort/imports": "error",
    "simple-import-sort/exports": "error",
    "import/newline-after-import": "error",
    "import/no-duplicates": "error",

    "react-hooks/rules-of-hooks": "error",
    "react-hooks/exhaustive-deps": "warn"
  }
}